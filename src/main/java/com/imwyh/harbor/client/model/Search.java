/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.imwyh.harbor.client.model.Project;
import com.imwyh.harbor.client.model.SearchRepository;
import com.imwyh.harbor.client.model.SearchResult;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Search
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T14:29:11.153+08:00[Asia/Shanghai]")public class Search {

  @SerializedName("project")
  private List<Project> project = null;

  @SerializedName("repository")
  private List<SearchRepository> repository = null;

  @SerializedName("chart")
  private List<SearchResult> chart = null;
  public Search project(List<Project> project) {
    this.project = project;
    return this;
  }

  public Search addProjectItem(Project projectItem) {
    if (this.project == null) {
      this.project = new ArrayList<Project>();
    }
    this.project.add(projectItem);
    return this;
  }

  /**
  * Search results of the projects that matched the filter keywords.
  * @return project
  **/
  @Schema(description = "Search results of the projects that matched the filter keywords.")
  public List<Project> getProject() {
    return project;
  }
  public void setProject(List<Project> project) {
    this.project = project;
  }
  public Search repository(List<SearchRepository> repository) {
    this.repository = repository;
    return this;
  }

  public Search addRepositoryItem(SearchRepository repositoryItem) {
    if (this.repository == null) {
      this.repository = new ArrayList<SearchRepository>();
    }
    this.repository.add(repositoryItem);
    return this;
  }

  /**
  * Search results of the repositories that matched the filter keywords.
  * @return repository
  **/
  @Schema(description = "Search results of the repositories that matched the filter keywords.")
  public List<SearchRepository> getRepository() {
    return repository;
  }
  public void setRepository(List<SearchRepository> repository) {
    this.repository = repository;
  }
  public Search chart(List<SearchResult> chart) {
    this.chart = chart;
    return this;
  }

  public Search addChartItem(SearchResult chartItem) {
    if (this.chart == null) {
      this.chart = new ArrayList<SearchResult>();
    }
    this.chart.add(chartItem);
    return this;
  }

  /**
  * Search results of the charts that macthed the filter keywords.
  * @return chart
  **/
  @Schema(description = "Search results of the charts that macthed the filter keywords.")
  public List<SearchResult> getChart() {
    return chart;
  }
  public void setChart(List<SearchResult> chart) {
    this.chart = chart;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Search search = (Search) o;
    return Objects.equals(this.project, search.project) &&
        Objects.equals(this.repository, search.repository) &&
        Objects.equals(this.chart, search.chart);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(project, repository, chart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Search {\n");
    
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
