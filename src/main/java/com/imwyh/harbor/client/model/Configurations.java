/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Configurations
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T14:29:11.153+08:00[Asia/Shanghai]")public class Configurations {

  @SerializedName("auth_mode")
  private String authMode = null;

  @SerializedName("email_from")
  private String emailFrom = null;

  @SerializedName("email_host")
  private String emailHost = null;

  @SerializedName("email_port")
  private Integer emailPort = null;

  @SerializedName("email_identity")
  private String emailIdentity = null;

  @SerializedName("email_username")
  private String emailUsername = null;

  @SerializedName("email_ssl")
  private Boolean emailSsl = null;

  @SerializedName("email_insecure")
  private Boolean emailInsecure = null;

  @SerializedName("ldap_url")
  private String ldapUrl = null;

  @SerializedName("ldap_base_dn")
  private String ldapBaseDn = null;

  @SerializedName("ldap_filter")
  private String ldapFilter = null;

  @SerializedName("ldap_scope")
  private Integer ldapScope = null;

  @SerializedName("ldap_uid")
  private String ldapUid = null;

  @SerializedName("ldap_search_dn")
  private String ldapSearchDn = null;

  @SerializedName("ldap_timeout")
  private Integer ldapTimeout = null;

  @SerializedName("ldap_group_attribute_name")
  private String ldapGroupAttributeName = null;

  @SerializedName("ldap_group_base_dn")
  private String ldapGroupBaseDn = null;

  @SerializedName("ldap_group_search_filter")
  private String ldapGroupSearchFilter = null;

  @SerializedName("ldap_group_search_scope")
  private Integer ldapGroupSearchScope = null;

  @SerializedName("ldap_group_admin_dn")
  private String ldapGroupAdminDn = null;

  @SerializedName("project_creation_restriction")
  private String projectCreationRestriction = null;

  @SerializedName("read_only")
  private Boolean readOnly = null;

  @SerializedName("self_registration")
  private Boolean selfRegistration = null;

  @SerializedName("token_expiration")
  private Integer tokenExpiration = null;

  @SerializedName("verify_remote_cert")
  private Boolean verifyRemoteCert = null;

  @SerializedName("scan_all_policy")
  private Object scanAllPolicy = null;
  public Configurations authMode(String authMode) {
    this.authMode = authMode;
    return this;
  }

  

  /**
  * The auth mode of current system, such as \&quot;db_auth\&quot;, \&quot;ldap_auth\&quot;
  * @return authMode
  **/
  @Schema(description = "The auth mode of current system, such as \"db_auth\", \"ldap_auth\"")
  public String getAuthMode() {
    return authMode;
  }
  public void setAuthMode(String authMode) {
    this.authMode = authMode;
  }
  public Configurations emailFrom(String emailFrom) {
    this.emailFrom = emailFrom;
    return this;
  }

  

  /**
  * The sender name for Email notification.
  * @return emailFrom
  **/
  @Schema(description = "The sender name for Email notification.")
  public String getEmailFrom() {
    return emailFrom;
  }
  public void setEmailFrom(String emailFrom) {
    this.emailFrom = emailFrom;
  }
  public Configurations emailHost(String emailHost) {
    this.emailHost = emailHost;
    return this;
  }

  

  /**
  * The hostname of SMTP server that sends Email notification.
  * @return emailHost
  **/
  @Schema(description = "The hostname of SMTP server that sends Email notification.")
  public String getEmailHost() {
    return emailHost;
  }
  public void setEmailHost(String emailHost) {
    this.emailHost = emailHost;
  }
  public Configurations emailPort(Integer emailPort) {
    this.emailPort = emailPort;
    return this;
  }

  

  /**
  * The port of SMTP server.
  * @return emailPort
  **/
  @Schema(description = "The port of SMTP server.")
  public Integer getEmailPort() {
    return emailPort;
  }
  public void setEmailPort(Integer emailPort) {
    this.emailPort = emailPort;
  }
  public Configurations emailIdentity(String emailIdentity) {
    this.emailIdentity = emailIdentity;
    return this;
  }

  

  /**
  * By default it&#x27;s empty so the email_username is picked.
  * @return emailIdentity
  **/
  @Schema(description = "By default it's empty so the email_username is picked.")
  public String getEmailIdentity() {
    return emailIdentity;
  }
  public void setEmailIdentity(String emailIdentity) {
    this.emailIdentity = emailIdentity;
  }
  public Configurations emailUsername(String emailUsername) {
    this.emailUsername = emailUsername;
    return this;
  }

  

  /**
  * The username for authenticate against SMTP server.
  * @return emailUsername
  **/
  @Schema(description = "The username for authenticate against SMTP server.")
  public String getEmailUsername() {
    return emailUsername;
  }
  public void setEmailUsername(String emailUsername) {
    this.emailUsername = emailUsername;
  }
  public Configurations emailSsl(Boolean emailSsl) {
    this.emailSsl = emailSsl;
    return this;
  }

  

  /**
  * When it&#x27;s set to true the system will access Email server via TLS by default.  If it&#x27;s set to false, it still will handle \&quot;STARTTLS\&quot; from server side.
  * @return emailSsl
  **/
  @Schema(description = "When it's set to true the system will access Email server via TLS by default.  If it's set to false, it still will handle \"STARTTLS\" from server side.")
  public Boolean isEmailSsl() {
    return emailSsl;
  }
  public void setEmailSsl(Boolean emailSsl) {
    this.emailSsl = emailSsl;
  }
  public Configurations emailInsecure(Boolean emailInsecure) {
    this.emailInsecure = emailInsecure;
    return this;
  }

  

  /**
  * Whether or not the certificate will be verified when Harbor tries to access the email server.
  * @return emailInsecure
  **/
  @Schema(description = "Whether or not the certificate will be verified when Harbor tries to access the email server.")
  public Boolean isEmailInsecure() {
    return emailInsecure;
  }
  public void setEmailInsecure(Boolean emailInsecure) {
    this.emailInsecure = emailInsecure;
  }
  public Configurations ldapUrl(String ldapUrl) {
    this.ldapUrl = ldapUrl;
    return this;
  }

  

  /**
  * The URL of LDAP server.
  * @return ldapUrl
  **/
  @Schema(description = "The URL of LDAP server.")
  public String getLdapUrl() {
    return ldapUrl;
  }
  public void setLdapUrl(String ldapUrl) {
    this.ldapUrl = ldapUrl;
  }
  public Configurations ldapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
    return this;
  }

  

  /**
  * The Base DN for LDAP binding.
  * @return ldapBaseDn
  **/
  @Schema(description = "The Base DN for LDAP binding.")
  public String getLdapBaseDn() {
    return ldapBaseDn;
  }
  public void setLdapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
  }
  public Configurations ldapFilter(String ldapFilter) {
    this.ldapFilter = ldapFilter;
    return this;
  }

  

  /**
  * The filter for LDAP binding.
  * @return ldapFilter
  **/
  @Schema(description = "The filter for LDAP binding.")
  public String getLdapFilter() {
    return ldapFilter;
  }
  public void setLdapFilter(String ldapFilter) {
    this.ldapFilter = ldapFilter;
  }
  public Configurations ldapScope(Integer ldapScope) {
    this.ldapScope = ldapScope;
    return this;
  }

  

  /**
  * 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE
  * @return ldapScope
  **/
  @Schema(description = "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE")
  public Integer getLdapScope() {
    return ldapScope;
  }
  public void setLdapScope(Integer ldapScope) {
    this.ldapScope = ldapScope;
  }
  public Configurations ldapUid(String ldapUid) {
    this.ldapUid = ldapUid;
    return this;
  }

  

  /**
  * The attribute which is used as identity for the LDAP binding, such as \&quot;CN\&quot; or \&quot;SAMAccountname\&quot;
  * @return ldapUid
  **/
  @Schema(description = "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"")
  public String getLdapUid() {
    return ldapUid;
  }
  public void setLdapUid(String ldapUid) {
    this.ldapUid = ldapUid;
  }
  public Configurations ldapSearchDn(String ldapSearchDn) {
    this.ldapSearchDn = ldapSearchDn;
    return this;
  }

  

  /**
  * The DN of the user to do the search.
  * @return ldapSearchDn
  **/
  @Schema(description = "The DN of the user to do the search.")
  public String getLdapSearchDn() {
    return ldapSearchDn;
  }
  public void setLdapSearchDn(String ldapSearchDn) {
    this.ldapSearchDn = ldapSearchDn;
  }
  public Configurations ldapTimeout(Integer ldapTimeout) {
    this.ldapTimeout = ldapTimeout;
    return this;
  }

  

  /**
  * timeout in seconds for connection to LDAP server.
  * @return ldapTimeout
  **/
  @Schema(description = "timeout in seconds for connection to LDAP server.")
  public Integer getLdapTimeout() {
    return ldapTimeout;
  }
  public void setLdapTimeout(Integer ldapTimeout) {
    this.ldapTimeout = ldapTimeout;
  }
  public Configurations ldapGroupAttributeName(String ldapGroupAttributeName) {
    this.ldapGroupAttributeName = ldapGroupAttributeName;
    return this;
  }

  

  /**
  * The attribute which is used as identity of the LDAP group, default is cn.
  * @return ldapGroupAttributeName
  **/
  @Schema(description = "The attribute which is used as identity of the LDAP group, default is cn.")
  public String getLdapGroupAttributeName() {
    return ldapGroupAttributeName;
  }
  public void setLdapGroupAttributeName(String ldapGroupAttributeName) {
    this.ldapGroupAttributeName = ldapGroupAttributeName;
  }
  public Configurations ldapGroupBaseDn(String ldapGroupBaseDn) {
    this.ldapGroupBaseDn = ldapGroupBaseDn;
    return this;
  }

  

  /**
  * The base DN to search LDAP group.
  * @return ldapGroupBaseDn
  **/
  @Schema(description = "The base DN to search LDAP group.")
  public String getLdapGroupBaseDn() {
    return ldapGroupBaseDn;
  }
  public void setLdapGroupBaseDn(String ldapGroupBaseDn) {
    this.ldapGroupBaseDn = ldapGroupBaseDn;
  }
  public Configurations ldapGroupSearchFilter(String ldapGroupSearchFilter) {
    this.ldapGroupSearchFilter = ldapGroupSearchFilter;
    return this;
  }

  

  /**
  * The filter to search the ldap group.
  * @return ldapGroupSearchFilter
  **/
  @Schema(description = "The filter to search the ldap group.")
  public String getLdapGroupSearchFilter() {
    return ldapGroupSearchFilter;
  }
  public void setLdapGroupSearchFilter(String ldapGroupSearchFilter) {
    this.ldapGroupSearchFilter = ldapGroupSearchFilter;
  }
  public Configurations ldapGroupSearchScope(Integer ldapGroupSearchScope) {
    this.ldapGroupSearchScope = ldapGroupSearchScope;
    return this;
  }

  

  /**
  * The scope to search ldap. &#x27;0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE&#x27;
  * @return ldapGroupSearchScope
  **/
  @Schema(description = "The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'")
  public Integer getLdapGroupSearchScope() {
    return ldapGroupSearchScope;
  }
  public void setLdapGroupSearchScope(Integer ldapGroupSearchScope) {
    this.ldapGroupSearchScope = ldapGroupSearchScope;
  }
  public Configurations ldapGroupAdminDn(String ldapGroupAdminDn) {
    this.ldapGroupAdminDn = ldapGroupAdminDn;
    return this;
  }

  

  /**
  * Specify the ldap group which have the same privilege with Harbor admin.
  * @return ldapGroupAdminDn
  **/
  @Schema(description = "Specify the ldap group which have the same privilege with Harbor admin.")
  public String getLdapGroupAdminDn() {
    return ldapGroupAdminDn;
  }
  public void setLdapGroupAdminDn(String ldapGroupAdminDn) {
    this.ldapGroupAdminDn = ldapGroupAdminDn;
  }
  public Configurations projectCreationRestriction(String projectCreationRestriction) {
    this.projectCreationRestriction = projectCreationRestriction;
    return this;
  }

  

  /**
  * This attribute restricts what users have the permission to create project.  It can be \&quot;everyone\&quot; or \&quot;adminonly\&quot;.
  * @return projectCreationRestriction
  **/
  @Schema(description = "This attribute restricts what users have the permission to create project.  It can be \"everyone\" or \"adminonly\".")
  public String getProjectCreationRestriction() {
    return projectCreationRestriction;
  }
  public void setProjectCreationRestriction(String projectCreationRestriction) {
    this.projectCreationRestriction = projectCreationRestriction;
  }
  public Configurations readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  

  /**
  * &#x27;docker push&#x27; is prohibited by Harbor if you set it to true.   
  * @return readOnly
  **/
  @Schema(description = "'docker push' is prohibited by Harbor if you set it to true.   ")
  public Boolean isReadOnly() {
    return readOnly;
  }
  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }
  public Configurations selfRegistration(Boolean selfRegistration) {
    this.selfRegistration = selfRegistration;
    return this;
  }

  

  /**
  * Whether the Harbor instance supports self-registration.  If it&#x27;s set to false, admin need to add user to the instance.
  * @return selfRegistration
  **/
  @Schema(description = "Whether the Harbor instance supports self-registration.  If it's set to false, admin need to add user to the instance.")
  public Boolean isSelfRegistration() {
    return selfRegistration;
  }
  public void setSelfRegistration(Boolean selfRegistration) {
    this.selfRegistration = selfRegistration;
  }
  public Configurations tokenExpiration(Integer tokenExpiration) {
    this.tokenExpiration = tokenExpiration;
    return this;
  }

  

  /**
  * The expiration time of the token for internal Registry, in minutes.
  * @return tokenExpiration
  **/
  @Schema(description = "The expiration time of the token for internal Registry, in minutes.")
  public Integer getTokenExpiration() {
    return tokenExpiration;
  }
  public void setTokenExpiration(Integer tokenExpiration) {
    this.tokenExpiration = tokenExpiration;
  }
  public Configurations verifyRemoteCert(Boolean verifyRemoteCert) {
    this.verifyRemoteCert = verifyRemoteCert;
    return this;
  }

  

  /**
  * Whether or not the certificate will be verified when Harbor tries to access a remote Harbor instance for replication.
  * @return verifyRemoteCert
  **/
  @Schema(description = "Whether or not the certificate will be verified when Harbor tries to access a remote Harbor instance for replication.")
  public Boolean isVerifyRemoteCert() {
    return verifyRemoteCert;
  }
  public void setVerifyRemoteCert(Boolean verifyRemoteCert) {
    this.verifyRemoteCert = verifyRemoteCert;
  }
  public Configurations scanAllPolicy(Object scanAllPolicy) {
    this.scanAllPolicy = scanAllPolicy;
    return this;
  }

  

  /**
  * Get scanAllPolicy
  * @return scanAllPolicy
  **/
  @Schema(description = "")
  public Object getScanAllPolicy() {
    return scanAllPolicy;
  }
  public void setScanAllPolicy(Object scanAllPolicy) {
    this.scanAllPolicy = scanAllPolicy;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Configurations configurations = (Configurations) o;
    return Objects.equals(this.authMode, configurations.authMode) &&
        Objects.equals(this.emailFrom, configurations.emailFrom) &&
        Objects.equals(this.emailHost, configurations.emailHost) &&
        Objects.equals(this.emailPort, configurations.emailPort) &&
        Objects.equals(this.emailIdentity, configurations.emailIdentity) &&
        Objects.equals(this.emailUsername, configurations.emailUsername) &&
        Objects.equals(this.emailSsl, configurations.emailSsl) &&
        Objects.equals(this.emailInsecure, configurations.emailInsecure) &&
        Objects.equals(this.ldapUrl, configurations.ldapUrl) &&
        Objects.equals(this.ldapBaseDn, configurations.ldapBaseDn) &&
        Objects.equals(this.ldapFilter, configurations.ldapFilter) &&
        Objects.equals(this.ldapScope, configurations.ldapScope) &&
        Objects.equals(this.ldapUid, configurations.ldapUid) &&
        Objects.equals(this.ldapSearchDn, configurations.ldapSearchDn) &&
        Objects.equals(this.ldapTimeout, configurations.ldapTimeout) &&
        Objects.equals(this.ldapGroupAttributeName, configurations.ldapGroupAttributeName) &&
        Objects.equals(this.ldapGroupBaseDn, configurations.ldapGroupBaseDn) &&
        Objects.equals(this.ldapGroupSearchFilter, configurations.ldapGroupSearchFilter) &&
        Objects.equals(this.ldapGroupSearchScope, configurations.ldapGroupSearchScope) &&
        Objects.equals(this.ldapGroupAdminDn, configurations.ldapGroupAdminDn) &&
        Objects.equals(this.projectCreationRestriction, configurations.projectCreationRestriction) &&
        Objects.equals(this.readOnly, configurations.readOnly) &&
        Objects.equals(this.selfRegistration, configurations.selfRegistration) &&
        Objects.equals(this.tokenExpiration, configurations.tokenExpiration) &&
        Objects.equals(this.verifyRemoteCert, configurations.verifyRemoteCert) &&
        Objects.equals(this.scanAllPolicy, configurations.scanAllPolicy);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(authMode, emailFrom, emailHost, emailPort, emailIdentity, emailUsername, emailSsl, emailInsecure, ldapUrl, ldapBaseDn, ldapFilter, ldapScope, ldapUid, ldapSearchDn, ldapTimeout, ldapGroupAttributeName, ldapGroupBaseDn, ldapGroupSearchFilter, ldapGroupSearchScope, ldapGroupAdminDn, projectCreationRestriction, readOnly, selfRegistration, tokenExpiration, verifyRemoteCert, scanAllPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Configurations {\n");
    
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    emailFrom: ").append(toIndentedString(emailFrom)).append("\n");
    sb.append("    emailHost: ").append(toIndentedString(emailHost)).append("\n");
    sb.append("    emailPort: ").append(toIndentedString(emailPort)).append("\n");
    sb.append("    emailIdentity: ").append(toIndentedString(emailIdentity)).append("\n");
    sb.append("    emailUsername: ").append(toIndentedString(emailUsername)).append("\n");
    sb.append("    emailSsl: ").append(toIndentedString(emailSsl)).append("\n");
    sb.append("    emailInsecure: ").append(toIndentedString(emailInsecure)).append("\n");
    sb.append("    ldapUrl: ").append(toIndentedString(ldapUrl)).append("\n");
    sb.append("    ldapBaseDn: ").append(toIndentedString(ldapBaseDn)).append("\n");
    sb.append("    ldapFilter: ").append(toIndentedString(ldapFilter)).append("\n");
    sb.append("    ldapScope: ").append(toIndentedString(ldapScope)).append("\n");
    sb.append("    ldapUid: ").append(toIndentedString(ldapUid)).append("\n");
    sb.append("    ldapSearchDn: ").append(toIndentedString(ldapSearchDn)).append("\n");
    sb.append("    ldapTimeout: ").append(toIndentedString(ldapTimeout)).append("\n");
    sb.append("    ldapGroupAttributeName: ").append(toIndentedString(ldapGroupAttributeName)).append("\n");
    sb.append("    ldapGroupBaseDn: ").append(toIndentedString(ldapGroupBaseDn)).append("\n");
    sb.append("    ldapGroupSearchFilter: ").append(toIndentedString(ldapGroupSearchFilter)).append("\n");
    sb.append("    ldapGroupSearchScope: ").append(toIndentedString(ldapGroupSearchScope)).append("\n");
    sb.append("    ldapGroupAdminDn: ").append(toIndentedString(ldapGroupAdminDn)).append("\n");
    sb.append("    projectCreationRestriction: ").append(toIndentedString(projectCreationRestriction)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    selfRegistration: ").append(toIndentedString(selfRegistration)).append("\n");
    sb.append("    tokenExpiration: ").append(toIndentedString(tokenExpiration)).append("\n");
    sb.append("    verifyRemoteCert: ").append(toIndentedString(verifyRemoteCert)).append("\n");
    sb.append("    scanAllPolicy: ").append(toIndentedString(scanAllPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
