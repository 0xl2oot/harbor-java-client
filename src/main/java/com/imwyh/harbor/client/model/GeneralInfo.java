/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * GeneralInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T14:29:11.153+08:00[Asia/Shanghai]")public class GeneralInfo {

  @SerializedName("with_notary")
  private Boolean withNotary = null;

  @SerializedName("with_clair")
  private Boolean withClair = null;

  @SerializedName("with_admiral")
  private Boolean withAdmiral = null;

  @SerializedName("admiral_endpoint")
  private String admiralEndpoint = null;

  @SerializedName("auth_mode")
  private String authMode = null;

  @SerializedName("project_creation_restriction")
  private String projectCreationRestriction = null;

  @SerializedName("self_registration")
  private Boolean selfRegistration = null;

  @SerializedName("has_ca_root")
  private Boolean hasCaRoot = null;

  @SerializedName("harbor_version")
  private String harborVersion = null;

  @SerializedName("next_scan_all")
  private Integer nextScanAll = null;

  @SerializedName("clair_vulnerability_status")
  private Object clairVulnerabilityStatus = null;
  public GeneralInfo withNotary(Boolean withNotary) {
    this.withNotary = withNotary;
    return this;
  }

  

  /**
  * If the Harbor instance is deployed with nested notary.
  * @return withNotary
  **/
  @Schema(description = "If the Harbor instance is deployed with nested notary.")
  public Boolean isWithNotary() {
    return withNotary;
  }
  public void setWithNotary(Boolean withNotary) {
    this.withNotary = withNotary;
  }
  public GeneralInfo withClair(Boolean withClair) {
    this.withClair = withClair;
    return this;
  }

  

  /**
  * If the Harbor instance is deployed with nested clair.
  * @return withClair
  **/
  @Schema(description = "If the Harbor instance is deployed with nested clair.")
  public Boolean isWithClair() {
    return withClair;
  }
  public void setWithClair(Boolean withClair) {
    this.withClair = withClair;
  }
  public GeneralInfo withAdmiral(Boolean withAdmiral) {
    this.withAdmiral = withAdmiral;
    return this;
  }

  

  /**
  * If the Harbor instance is deployed with Admiral.
  * @return withAdmiral
  **/
  @Schema(description = "If the Harbor instance is deployed with Admiral.")
  public Boolean isWithAdmiral() {
    return withAdmiral;
  }
  public void setWithAdmiral(Boolean withAdmiral) {
    this.withAdmiral = withAdmiral;
  }
  public GeneralInfo admiralEndpoint(String admiralEndpoint) {
    this.admiralEndpoint = admiralEndpoint;
    return this;
  }

  

  /**
  * The url of the endpoint of admiral instance.
  * @return admiralEndpoint
  **/
  @Schema(description = "The url of the endpoint of admiral instance.")
  public String getAdmiralEndpoint() {
    return admiralEndpoint;
  }
  public void setAdmiralEndpoint(String admiralEndpoint) {
    this.admiralEndpoint = admiralEndpoint;
  }
  public GeneralInfo authMode(String authMode) {
    this.authMode = authMode;
    return this;
  }

  

  /**
  * The auth mode of current Harbor instance.
  * @return authMode
  **/
  @Schema(description = "The auth mode of current Harbor instance.")
  public String getAuthMode() {
    return authMode;
  }
  public void setAuthMode(String authMode) {
    this.authMode = authMode;
  }
  public GeneralInfo projectCreationRestriction(String projectCreationRestriction) {
    this.projectCreationRestriction = projectCreationRestriction;
    return this;
  }

  

  /**
  * Indicate who can create projects, it could be &#x27;adminonly&#x27; or &#x27;everyone&#x27;.
  * @return projectCreationRestriction
  **/
  @Schema(description = "Indicate who can create projects, it could be 'adminonly' or 'everyone'.")
  public String getProjectCreationRestriction() {
    return projectCreationRestriction;
  }
  public void setProjectCreationRestriction(String projectCreationRestriction) {
    this.projectCreationRestriction = projectCreationRestriction;
  }
  public GeneralInfo selfRegistration(Boolean selfRegistration) {
    this.selfRegistration = selfRegistration;
    return this;
  }

  

  /**
  * Indicate whether the Harbor instance enable user to register himself.
  * @return selfRegistration
  **/
  @Schema(description = "Indicate whether the Harbor instance enable user to register himself.")
  public Boolean isSelfRegistration() {
    return selfRegistration;
  }
  public void setSelfRegistration(Boolean selfRegistration) {
    this.selfRegistration = selfRegistration;
  }
  public GeneralInfo hasCaRoot(Boolean hasCaRoot) {
    this.hasCaRoot = hasCaRoot;
    return this;
  }

  

  /**
  * Indicate whether there is a ca root cert file ready for download in the file system.
  * @return hasCaRoot
  **/
  @Schema(description = "Indicate whether there is a ca root cert file ready for download in the file system.")
  public Boolean isHasCaRoot() {
    return hasCaRoot;
  }
  public void setHasCaRoot(Boolean hasCaRoot) {
    this.hasCaRoot = hasCaRoot;
  }
  public GeneralInfo harborVersion(String harborVersion) {
    this.harborVersion = harborVersion;
    return this;
  }

  

  /**
  * The build version of Harbor.
  * @return harborVersion
  **/
  @Schema(description = "The build version of Harbor.")
  public String getHarborVersion() {
    return harborVersion;
  }
  public void setHarborVersion(String harborVersion) {
    this.harborVersion = harborVersion;
  }
  public GeneralInfo nextScanAll(Integer nextScanAll) {
    this.nextScanAll = nextScanAll;
    return this;
  }

  

  /**
  * The UTC time in milliseconds, after which user can call scanAll API to scan all images.
  * @return nextScanAll
  **/
  @Schema(description = "The UTC time in milliseconds, after which user can call scanAll API to scan all images.")
  public Integer getNextScanAll() {
    return nextScanAll;
  }
  public void setNextScanAll(Integer nextScanAll) {
    this.nextScanAll = nextScanAll;
  }
  public GeneralInfo clairVulnerabilityStatus(Object clairVulnerabilityStatus) {
    this.clairVulnerabilityStatus = clairVulnerabilityStatus;
    return this;
  }

  

  /**
  * The status of vulnerability data of Clair.
  * @return clairVulnerabilityStatus
  **/
  @Schema(description = "The status of vulnerability data of Clair.")
  public Object getClairVulnerabilityStatus() {
    return clairVulnerabilityStatus;
  }
  public void setClairVulnerabilityStatus(Object clairVulnerabilityStatus) {
    this.clairVulnerabilityStatus = clairVulnerabilityStatus;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralInfo generalInfo = (GeneralInfo) o;
    return Objects.equals(this.withNotary, generalInfo.withNotary) &&
        Objects.equals(this.withClair, generalInfo.withClair) &&
        Objects.equals(this.withAdmiral, generalInfo.withAdmiral) &&
        Objects.equals(this.admiralEndpoint, generalInfo.admiralEndpoint) &&
        Objects.equals(this.authMode, generalInfo.authMode) &&
        Objects.equals(this.projectCreationRestriction, generalInfo.projectCreationRestriction) &&
        Objects.equals(this.selfRegistration, generalInfo.selfRegistration) &&
        Objects.equals(this.hasCaRoot, generalInfo.hasCaRoot) &&
        Objects.equals(this.harborVersion, generalInfo.harborVersion) &&
        Objects.equals(this.nextScanAll, generalInfo.nextScanAll) &&
        Objects.equals(this.clairVulnerabilityStatus, generalInfo.clairVulnerabilityStatus);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(withNotary, withClair, withAdmiral, admiralEndpoint, authMode, projectCreationRestriction, selfRegistration, hasCaRoot, harborVersion, nextScanAll, clairVulnerabilityStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralInfo {\n");
    
    sb.append("    withNotary: ").append(toIndentedString(withNotary)).append("\n");
    sb.append("    withClair: ").append(toIndentedString(withClair)).append("\n");
    sb.append("    withAdmiral: ").append(toIndentedString(withAdmiral)).append("\n");
    sb.append("    admiralEndpoint: ").append(toIndentedString(admiralEndpoint)).append("\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    projectCreationRestriction: ").append(toIndentedString(projectCreationRestriction)).append("\n");
    sb.append("    selfRegistration: ").append(toIndentedString(selfRegistration)).append("\n");
    sb.append("    hasCaRoot: ").append(toIndentedString(hasCaRoot)).append("\n");
    sb.append("    harborVersion: ").append(toIndentedString(harborVersion)).append("\n");
    sb.append("    nextScanAll: ").append(toIndentedString(nextScanAll)).append("\n");
    sb.append("    clairVulnerabilityStatus: ").append(toIndentedString(clairVulnerabilityStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
