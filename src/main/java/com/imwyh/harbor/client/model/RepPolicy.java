/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.imwyh.harbor.client.model.Project;
import com.imwyh.harbor.client.model.RepFilter;
import com.imwyh.harbor.client.model.RepTarget;
import com.imwyh.harbor.client.model.RepTrigger;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RepPolicy
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T14:29:11.153+08:00[Asia/Shanghai]")public class RepPolicy {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("projects")
  private List<Project> projects = null;

  @SerializedName("targets")
  private List<RepTarget> targets = null;

  @SerializedName("trigger")
  private RepTrigger trigger = null;

  @SerializedName("filters")
  private List<RepFilter> filters = null;

  @SerializedName("replicate_existing_image_now")
  private Boolean replicateExistingImageNow = null;

  @SerializedName("replicate_deletion")
  private Boolean replicateDeletion = null;

  @SerializedName("creation_time")
  private String creationTime = null;

  @SerializedName("update_time")
  private String updateTime = null;

  @SerializedName("error_job_count")
  private Integer errorJobCount = null;
  public RepPolicy id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The policy ID.
  * @return id
  **/
  @Schema(description = "The policy ID.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public RepPolicy name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The policy name.
  * @return name
  **/
  @Schema(description = "The policy name.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public RepPolicy description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * The description of the policy.
  * @return description
  **/
  @Schema(description = "The description of the policy.")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public RepPolicy projects(List<Project> projects) {
    this.projects = projects;
    return this;
  }

  public RepPolicy addProjectsItem(Project projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<Project>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
  * The project list that the policy applys to.
  * @return projects
  **/
  @Schema(description = "The project list that the policy applys to.")
  public List<Project> getProjects() {
    return projects;
  }
  public void setProjects(List<Project> projects) {
    this.projects = projects;
  }
  public RepPolicy targets(List<RepTarget> targets) {
    this.targets = targets;
    return this;
  }

  public RepPolicy addTargetsItem(RepTarget targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<RepTarget>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
  * The target list.
  * @return targets
  **/
  @Schema(description = "The target list.")
  public List<RepTarget> getTargets() {
    return targets;
  }
  public void setTargets(List<RepTarget> targets) {
    this.targets = targets;
  }
  public RepPolicy trigger(RepTrigger trigger) {
    this.trigger = trigger;
    return this;
  }

  

  /**
  * Get trigger
  * @return trigger
  **/
  @Schema(description = "")
  public RepTrigger getTrigger() {
    return trigger;
  }
  public void setTrigger(RepTrigger trigger) {
    this.trigger = trigger;
  }
  public RepPolicy filters(List<RepFilter> filters) {
    this.filters = filters;
    return this;
  }

  public RepPolicy addFiltersItem(RepFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<RepFilter>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
  * The replication policy filter array.
  * @return filters
  **/
  @Schema(description = "The replication policy filter array.")
  public List<RepFilter> getFilters() {
    return filters;
  }
  public void setFilters(List<RepFilter> filters) {
    this.filters = filters;
  }
  public RepPolicy replicateExistingImageNow(Boolean replicateExistingImageNow) {
    this.replicateExistingImageNow = replicateExistingImageNow;
    return this;
  }

  

  /**
  * Whether to replicate the existing images now.
  * @return replicateExistingImageNow
  **/
  @Schema(description = "Whether to replicate the existing images now.")
  public Boolean isReplicateExistingImageNow() {
    return replicateExistingImageNow;
  }
  public void setReplicateExistingImageNow(Boolean replicateExistingImageNow) {
    this.replicateExistingImageNow = replicateExistingImageNow;
  }
  public RepPolicy replicateDeletion(Boolean replicateDeletion) {
    this.replicateDeletion = replicateDeletion;
    return this;
  }

  

  /**
  * Whether to replicate the deletion operation.
  * @return replicateDeletion
  **/
  @Schema(description = "Whether to replicate the deletion operation.")
  public Boolean isReplicateDeletion() {
    return replicateDeletion;
  }
  public void setReplicateDeletion(Boolean replicateDeletion) {
    this.replicateDeletion = replicateDeletion;
  }
  public RepPolicy creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  

  /**
  * The create time of the policy.
  * @return creationTime
  **/
  @Schema(description = "The create time of the policy.")
  public String getCreationTime() {
    return creationTime;
  }
  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }
  public RepPolicy updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  

  /**
  * The update time of the policy.
  * @return updateTime
  **/
  @Schema(description = "The update time of the policy.")
  public String getUpdateTime() {
    return updateTime;
  }
  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }
  public RepPolicy errorJobCount(Integer errorJobCount) {
    this.errorJobCount = errorJobCount;
    return this;
  }

  

  /**
  * The error job count number for the policy.
  * @return errorJobCount
  **/
  @Schema(description = "The error job count number for the policy.")
  public Integer getErrorJobCount() {
    return errorJobCount;
  }
  public void setErrorJobCount(Integer errorJobCount) {
    this.errorJobCount = errorJobCount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepPolicy repPolicy = (RepPolicy) o;
    return Objects.equals(this.id, repPolicy.id) &&
        Objects.equals(this.name, repPolicy.name) &&
        Objects.equals(this.description, repPolicy.description) &&
        Objects.equals(this.projects, repPolicy.projects) &&
        Objects.equals(this.targets, repPolicy.targets) &&
        Objects.equals(this.trigger, repPolicy.trigger) &&
        Objects.equals(this.filters, repPolicy.filters) &&
        Objects.equals(this.replicateExistingImageNow, repPolicy.replicateExistingImageNow) &&
        Objects.equals(this.replicateDeletion, repPolicy.replicateDeletion) &&
        Objects.equals(this.creationTime, repPolicy.creationTime) &&
        Objects.equals(this.updateTime, repPolicy.updateTime) &&
        Objects.equals(this.errorJobCount, repPolicy.errorJobCount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, name, description, projects, targets, trigger, filters, replicateExistingImageNow, replicateDeletion, creationTime, updateTime, errorJobCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepPolicy {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    replicateExistingImageNow: ").append(toIndentedString(replicateExistingImageNow)).append("\n");
    sb.append("    replicateDeletion: ").append(toIndentedString(replicateDeletion)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    errorJobCount: ").append(toIndentedString(errorJobCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
