/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.api;

import com.imwyh.harbor.client.ApiException;
import com.imwyh.harbor.client.model.AccessLog;
import com.imwyh.harbor.client.model.ChartInfoEntry;
import com.imwyh.harbor.client.model.Configurations;
import com.imwyh.harbor.client.model.ConfigurationsResponse;
import com.imwyh.harbor.client.model.DetailedTag;
import com.imwyh.harbor.client.model.EmailServerSetting;
import java.io.File;
import com.imwyh.harbor.client.model.GCResult;
import com.imwyh.harbor.client.model.GCSchedule;
import com.imwyh.harbor.client.model.GeneralInfo;
import com.imwyh.harbor.client.model.HasAdminRole;
import com.imwyh.harbor.client.model.JobStatus;
import com.imwyh.harbor.client.model.Label;
import com.imwyh.harbor.client.model.LdapConf;
import com.imwyh.harbor.client.model.LdapFailedImportUsers;
import com.imwyh.harbor.client.model.LdapImportUsers;
import com.imwyh.harbor.client.model.LdapUsers;
import com.imwyh.harbor.client.model.Manifest;
import com.imwyh.harbor.client.model.Password;
import com.imwyh.harbor.client.model.PingTarget;
import com.imwyh.harbor.client.model.Project;
import com.imwyh.harbor.client.model.ProjectMember;
import com.imwyh.harbor.client.model.ProjectMemberEntity;
import com.imwyh.harbor.client.model.ProjectMetadata;
import com.imwyh.harbor.client.model.ProjectReq;
import com.imwyh.harbor.client.model.PutTarget;
import com.imwyh.harbor.client.model.RepPolicy;
import com.imwyh.harbor.client.model.RepTarget;
import com.imwyh.harbor.client.model.RepTargetPost;
import com.imwyh.harbor.client.model.Replication;
import com.imwyh.harbor.client.model.ReplicationResponse;
import com.imwyh.harbor.client.model.RepoSignature;
import com.imwyh.harbor.client.model.Repository;
import com.imwyh.harbor.client.model.RepositoryDescription;
import com.imwyh.harbor.client.model.Resource;
import com.imwyh.harbor.client.model.RetagReq;
import com.imwyh.harbor.client.model.RoleRequest;
import com.imwyh.harbor.client.model.Search;
import com.imwyh.harbor.client.model.StatisticMap;
import com.imwyh.harbor.client.model.SystemInfo;
import com.imwyh.harbor.client.model.UpdateJobs;
import com.imwyh.harbor.client.model.User;
import com.imwyh.harbor.client.model.UserGroup;
import com.imwyh.harbor.client.model.UserProfile;
import com.imwyh.harbor.client.model.VulnerabilityItem;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Upload a chart file to the defult &#x27;library&#x27; project.
     *
     * Upload a chart file to the default &#x27;library&#x27; project. Uploading together with the prov file at the same time is also supported.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoChartsPostTest() throws ApiException {
        File chart = null;
        File prov = null;
        api.chartrepoChartsPost(chart, prov);

        // TODO: test validations
    }
    /**
     * Check the health of chart repository service.
     *
     * Check the health of chart repository service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoHealthGetTest() throws ApiException {
        Object response = api.chartrepoHealthGet();

        // TODO: test validations
    }
    /**
     * Get all the charts under the specified project
     *
     * Get all the charts under the specified project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsGetTest() throws ApiException {
        String repo = null;
        List<ChartInfoEntry> response = api.chartrepoRepoChartsGet(repo);

        // TODO: test validations
    }
    /**
     * Delete all the versions of the specified chart
     *
     * Delete all the versions of the specified chart
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        api.chartrepoRepoChartsNameDelete(repo, name);

        // TODO: test validations
    }
    /**
     * Get all the versions of the specified chart
     *
     * Get all the versions of the specified chart
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameGetTest() throws ApiException {
        String repo = null;
        String name = null;
        api.chartrepoRepoChartsNameGet(repo, name);

        // TODO: test validations
    }
    /**
     * Delete the specified chart version
     *
     * Delete the specified chart version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        api.chartrepoRepoChartsNameVersionDelete(repo, name, version);

        // TODO: test validations
    }
    /**
     * Get the specified chart version
     *
     * Get the specified chart version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionGetTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        api.chartrepoRepoChartsNameVersionGet(repo, name, version);

        // TODO: test validations
    }
    /**
     * Upload a chart file to the specified project.
     *
     * Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsPostTest() throws ApiException {
        String repo = null;
        File chart = null;
        File prov = null;
        api.chartrepoRepoChartsPost(repo, chart, prov);

        // TODO: test validations
    }
    /**
     * Upload a provance file to the specified project.
     *
     * Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoProvPostTest() throws ApiException {
        String repo = null;
        File prov = null;
        api.chartrepoRepoProvPost(repo, prov);

        // TODO: test validations
    }
    /**
     * Return the attahced labels of chart.
     *
     * Return the attahced labels of the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartreporepoChartsnameversionLabelsGetTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        api.chartreporepoChartsnameversionLabelsGet(repo, name, version);

        // TODO: test validations
    }
    /**
     * Mark label to chart.
     *
     * Mark label to the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartreporepoChartsnameversionLabelsPostTest() throws ApiException {
        Label body = null;
        String repo = null;
        String name = null;
        String version = null;
        api.chartreporepoChartsnameversionLabelsPost(body, repo, name, version);

        // TODO: test validations
    }
    /**
     * Remove label from chart.
     *
     * Remove label from the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartreporepoChartsnameversionLabelsidDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        Integer id = null;
        api.chartreporepoChartsnameversionLabelsidDelete(repo, name, version, id);

        // TODO: test validations
    }
    /**
     * Get system configurations.
     *
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationsGetTest() throws ApiException {
        ConfigurationsResponse response = api.configurationsGet();

        // TODO: test validations
    }
    /**
     * Modify system configurations.
     *
     * This endpoint is for modifying system configurations that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationsPutTest() throws ApiException {
        Configurations body = null;
        api.configurationsPut(body);

        // TODO: test validations
    }
    /**
     * Reset system configurations.
     *
     * Reset system configurations from environment variables. Can only be accessed by admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationsResetPostTest() throws ApiException {
        api.configurationsResetPost();

        // TODO: test validations
    }
    /**
     * Test connection and authentication with email server.
     *
     * Test connection and authentication with email server.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailPingPostTest() throws ApiException {
        EmailServerSetting body = null;
        api.emailPingPost(body);

        // TODO: test validations
    }
    /**
     * Sync repositories from registry to DB.
     *
     * This endpoint is for syncing all repositories of registry with database.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalSyncregistryPostTest() throws ApiException {
        api.internalSyncregistryPost();

        // TODO: test validations
    }
    /**
     * List filters jobs according to the policy and repository
     *
     * This endpoint let user list filters jobs according to the policy and repository. (if start_time and end_time are both null, list jobs of last 10 days) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsReplicationGetTest() throws ApiException {
        Integer policyId = null;
        String opUuid = null;
        Integer num = null;
        Integer endTime = null;
        Integer startTime = null;
        String repository = null;
        String status = null;
        Integer page = null;
        Integer pageSize = null;
        List<JobStatus> response = api.jobsReplicationGet(policyId, opUuid, num, endTime, startTime, repository, status, page, pageSize);

        // TODO: test validations
    }
    /**
     * Delete specific ID job.
     *
     * This endpoint is aimed to remove specific ID job from jobservice. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsReplicationIdDeleteTest() throws ApiException {
        Integer id = null;
        api.jobsReplicationIdDelete(id);

        // TODO: test validations
    }
    /**
     * Get job logs.
     *
     * This endpoint let user search job logs filtered by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsReplicationIdLogGetTest() throws ApiException {
        Integer id = null;
        api.jobsReplicationIdLogGet(id);

        // TODO: test validations
    }
    /**
     * Update status of jobs. Only stop is supported for now.
     *
     * The endpoint is used to stop the replication jobs of a policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsReplicationPutTest() throws ApiException {
        UpdateJobs body = null;
        api.jobsReplicationPut(body);

        // TODO: test validations
    }
    /**
     * Get job logs.
     *
     * This endpoint let user get scan job logs filtered by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsScanIdLogGetTest() throws ApiException {
        Integer id = null;
        api.jobsScanIdLogGet(id);

        // TODO: test validations
    }
    /**
     * List labels according to the query strings.
     *
     * This endpoint let user list labels by name, scope and project_id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsGetTest() throws ApiException {
        String scope = null;
        String name = null;
        Integer projectId = null;
        Integer page = null;
        Integer pageSize = null;
        List<Label> response = api.labelsGet(scope, name, projectId, page, pageSize);

        // TODO: test validations
    }
    /**
     * Delete the label specified by ID.
     *
     * Delete the label specified by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.labelsIdDelete(id);

        // TODO: test validations
    }
    /**
     * Get the label specified by ID.
     *
     * This endpoint let user get the label by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdGetTest() throws ApiException {
        Integer id = null;
        Label response = api.labelsIdGet(id);

        // TODO: test validations
    }
    /**
     * Update the label properties.
     *
     * This endpoint let user update label properties. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdPutTest() throws ApiException {
        Label body = null;
        Integer id = null;
        api.labelsIdPut(body, id);

        // TODO: test validations
    }
    /**
     * Get the resources that the label is referenced by.
     *
     * This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdResourcesGetTest() throws ApiException {
        Integer id = null;
        Resource response = api.labelsIdResourcesGet(id);

        // TODO: test validations
    }
    /**
     * Post creates a label
     *
     * This endpoint let user creates a label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsPostTest() throws ApiException {
        Label body = null;
        api.labelsPost(body);

        // TODO: test validations
    }
    /**
     * Search available ldap groups.
     *
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapGroupsSearchGetTest() throws ApiException {
        String groupname = null;
        String groupdn = null;
        List<UserGroup> response = api.ldapGroupsSearchGet(groupname, groupdn);

        // TODO: test validations
    }
    /**
     * Ping available ldap service.
     *
     * This endpoint ping the available ldap service for test related configuration parameters.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapPingPostTest() throws ApiException {
        LdapConf body = null;
        api.ldapPingPost(body);

        // TODO: test validations
    }
    /**
     * Import selected available ldap users.
     *
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information.  If have errors when import user, will return the list of importing failed uid and the failed reason. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapUsersImportPostTest() throws ApiException {
        LdapImportUsers body = null;
        api.ldapUsersImportPost(body);

        // TODO: test validations
    }
    /**
     * Search available ldap users.
     *
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapUsersSearchGetTest() throws ApiException {
        String username = null;
        List<LdapUsers> response = api.ldapUsersSearchGet(username);

        // TODO: test validations
    }
    /**
     * Get recent logs of the projects which the user is a member of
     *
     * This endpoint let user see the recent operation logs of the projects which he is member of  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsGetTest() throws ApiException {
        String username = null;
        String repository = null;
        String tag = null;
        String operation = null;
        String beginTimestamp = null;
        String endTimestamp = null;
        Integer page = null;
        Integer pageSize = null;
        List<AccessLog> response = api.logsGet(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);

        // TODO: test validations
    }
    /**
     * List filters policies by name and project_id
     *
     * This endpoint let user list filters policies by name and project_id, if name and project_id are nil, list returns all policies 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void policiesReplicationGetTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        Integer page = null;
        Integer pageSize = null;
        List<RepPolicy> response = api.policiesReplicationGet(name, projectId, page, pageSize);

        // TODO: test validations
    }
    /**
     * Delete the replication policy specified by ID.
     *
     * Delete the replication policy specified by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void policiesReplicationIdDeleteTest() throws ApiException {
        Integer id = null;
        api.policiesReplicationIdDelete(id);

        // TODO: test validations
    }
    /**
     * Get replication policy.
     *
     * This endpoint let user search replication policy by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void policiesReplicationIdGetTest() throws ApiException {
        Integer id = null;
        RepPolicy response = api.policiesReplicationIdGet(id);

        // TODO: test validations
    }
    /**
     * Put modifies name, description, target and enablement of policy.
     *
     * This endpoint let user update policy name, description, target and enablement. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void policiesReplicationIdPutTest() throws ApiException {
        RepPolicy body = null;
        Integer id = null;
        api.policiesReplicationIdPut(body, id);

        // TODO: test validations
    }
    /**
     * Post creates a policy
     *
     * This endpoint let user creates a policy, and if it is enabled, the replication will be triggered right now. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void policiesReplicationPostTest() throws ApiException {
        RepPolicy body = null;
        api.policiesReplicationPost(body);

        // TODO: test validations
    }
    /**
     * List projects
     *
     * This endpoint returns all projects created by Harbor, and can be filtered by project name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        String name = null;
        Boolean _public = null;
        String owner = null;
        Integer page = null;
        Integer pageSize = null;
        List<Project> response = api.projectsGet(name, _public, owner, page, pageSize);

        // TODO: test validations
    }
    /**
     * Check if the project name user provided already exists.
     *
     * This endpoint is used to check if the project name user provided already exist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsHeadTest() throws ApiException {
        String projectName = null;
        api.projectsHead(projectName);

        // TODO: test validations
    }
    /**
     * Create a new project.
     *
     * This endpoint is for user to create a new project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsPostTest() throws ApiException {
        ProjectReq body = null;
        api.projectsPost(body);

        // TODO: test validations
    }
    /**
     * Delete project by projectID
     *
     * This endpoint is aimed to delete project by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdDeleteTest() throws ApiException {
        Integer projectId = null;
        api.projectsProjectIdDelete(projectId);

        // TODO: test validations
    }
    /**
     * Return specific project detail infomation
     *
     * This endpoint returns specific project information by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdGetTest() throws ApiException {
        Integer projectId = null;
        Project response = api.projectsProjectIdGet(projectId);

        // TODO: test validations
    }
    /**
     * Get access logs accompany with a relevant project.
     *
     * This endpoint let user search access logs filtered by operations and date time ranges. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdLogsGetTest() throws ApiException {
        Integer projectId = null;
        String username = null;
        String repository = null;
        String tag = null;
        String operation = null;
        String beginTimestamp = null;
        String endTimestamp = null;
        Integer page = null;
        Integer pageSize = null;
        List<AccessLog> response = api.projectsProjectIdLogsGet(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);

        // TODO: test validations
    }
    /**
     * Get all project member information
     *
     * Get all project member information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersGetTest() throws ApiException {
        Integer projectId = null;
        String entityname = null;
        List<ProjectMemberEntity> response = api.projectsProjectIdMembersGet(projectId, entityname);

        // TODO: test validations
    }
    /**
     * Delete project member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer mid = null;
        api.projectsProjectIdMembersMidDelete(projectId, mid);

        // TODO: test validations
    }
    /**
     * Get the project member information
     *
     * Get the project member information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidGetTest() throws ApiException {
        Integer projectId = null;
        Integer mid = null;
        ProjectMemberEntity response = api.projectsProjectIdMembersMidGet(projectId, mid);

        // TODO: test validations
    }
    /**
     * Update project member
     *
     * Update project member relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidPutTest() throws ApiException {
        Integer projectId = null;
        Integer mid = null;
        RoleRequest body = null;
        api.projectsProjectIdMembersMidPut(projectId, mid, body);

        // TODO: test validations
    }
    /**
     * Create project member
     *
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#x27;s id,  If does not exist, it will SearchAndOnBoard the group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersPostTest() throws ApiException {
        Integer projectId = null;
        ProjectMember body = null;
        api.projectsProjectIdMembersPost(projectId, body);

        // TODO: test validations
    }
    /**
     * Get project metadata.
     *
     * This endpoint returns metadata of the project specified by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasGetTest() throws ApiException {
        Integer projectId = null;
        ProjectMetadata response = api.projectsProjectIdMetadatasGet(projectId);

        // TODO: test validations
    }
    /**
     * Delete metadata of a project
     *
     * This endpoint is aimed to delete metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNameDeleteTest() throws ApiException {
        Integer projectId = null;
        String metaName = null;
        api.projectsProjectIdMetadatasMetaNameDelete(projectId, metaName);

        // TODO: test validations
    }
    /**
     * Get project metadata
     *
     * This endpoint returns specified metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNameGetTest() throws ApiException {
        Integer projectId = null;
        String metaName = null;
        ProjectMetadata response = api.projectsProjectIdMetadatasMetaNameGet(projectId, metaName);

        // TODO: test validations
    }
    /**
     * Update metadata of a project.
     *
     * This endpoint is aimed to update the metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNamePutTest() throws ApiException {
        Integer projectId = null;
        String metaName = null;
        api.projectsProjectIdMetadatasMetaNamePut(projectId, metaName);

        // TODO: test validations
    }
    /**
     * Add metadata for the project.
     *
     * This endpoint is aimed to add metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasPostTest() throws ApiException {
        ProjectMetadata body = null;
        Integer projectId = null;
        api.projectsProjectIdMetadatasPost(body, projectId);

        // TODO: test validations
    }
    /**
     * Update properties for a selected project.
     *
     * This endpoint is aimed to update the properties of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdPutTest() throws ApiException {
        ProjectReq body = null;
        Integer projectId = null;
        api.projectsProjectIdPut(body, projectId);

        // TODO: test validations
    }
    /**
     * Trigger the replication according to the specified policy.
     *
     * This endpoint is used to trigger a replication. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationsPostTest() throws ApiException {
        Replication body = null;
        ReplicationResponse response = api.replicationsPost(body);

        // TODO: test validations
    }
    /**
     * Get repositories accompany with relevant project and repo name.
     *
     * This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesGetTest() throws ApiException {
        Integer projectId = null;
        String q = null;
        String sort = null;
        Integer labelId = null;
        Integer page = null;
        Integer pageSize = null;
        List<Repository> response = api.repositoriesGet(projectId, q, sort, labelId, page, pageSize);

        // TODO: test validations
    }
    /**
     * Delete a repository.
     *
     * This endpoint let user delete a repository with name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameDeleteTest() throws ApiException {
        String repoName = null;
        api.repositoriesRepoNameDelete(repoName);

        // TODO: test validations
    }
    /**
     * Get labels of a repository.
     *
     * Get labels of a repository specified by the repo_name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsGetTest() throws ApiException {
        String repoName = null;
        List<Label> response = api.repositoriesRepoNameLabelsGet(repoName);

        // TODO: test validations
    }
    /**
     * Delete label from the repository.
     *
     * Delete the label from the repository specified by the repo_name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsLabelIdDeleteTest() throws ApiException {
        String repoName = null;
        Integer labelId = null;
        api.repositoriesRepoNameLabelsLabelIdDelete(repoName, labelId);

        // TODO: test validations
    }
    /**
     * Add a label to the repository.
     *
     * Add a label to the repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsPostTest() throws ApiException {
        Label body = null;
        String repoName = null;
        api.repositoriesRepoNameLabelsPost(body, repoName);

        // TODO: test validations
    }
    /**
     * Update description of the repository.
     *
     * This endpoint is used to update description of the repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNamePutTest() throws ApiException {
        RepositoryDescription body = null;
        String repoName = null;
        api.repositoriesRepoNamePut(body, repoName);

        // TODO: test validations
    }
    /**
     * Get signature information of a repository
     *
     * This endpoint aims to retrieve signature information of a repository, the data is from the nested notary instance of Harbor. If the repository does not have any signature information in notary, this API will return an empty list with response code 200, instead of 404 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameSignaturesGetTest() throws ApiException {
        String repoName = null;
        List<RepoSignature> response = api.repositoriesRepoNameSignaturesGet(repoName);

        // TODO: test validations
    }
    /**
     * Get tags of a relevant repository.
     *
     * This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsGetTest() throws ApiException {
        String repoName = null;
        String labelIds = null;
        List<DetailedTag> response = api.repositoriesRepoNameTagsGet(repoName, labelIds);

        // TODO: test validations
    }
    /**
     * Retag an image
     *
     * This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsPostTest() throws ApiException {
        RetagReq body = null;
        String repoName = null;
        api.repositoriesRepoNameTagsPost(body, repoName);

        // TODO: test validations
    }
    /**
     * Delete a tag in a repository.
     *
     * This endpoint let user delete tags with repo name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagDeleteTest() throws ApiException {
        String repoName = null;
        String tag = null;
        api.repositoriesRepoNameTagsTagDelete(repoName, tag);

        // TODO: test validations
    }
    /**
     * Get the tag of the repository.
     *
     * This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        DetailedTag response = api.repositoriesRepoNameTagsTagGet(repoName, tag);

        // TODO: test validations
    }
    /**
     * Get labels of an image.
     *
     * Get labels of an image specified by the repo_name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        List<Label> response = api.repositoriesRepoNameTagsTagLabelsGet(repoName, tag);

        // TODO: test validations
    }
    /**
     * Delete label from the image.
     *
     * Delete the label from the image specified by the repo_name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsLabelIdDeleteTest() throws ApiException {
        String repoName = null;
        String tag = null;
        Integer labelId = null;
        api.repositoriesRepoNameTagsTagLabelsLabelIdDelete(repoName, tag, labelId);

        // TODO: test validations
    }
    /**
     * Add a label to image.
     *
     * Add a label to the image. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsPostTest() throws ApiException {
        Label body = null;
        String repoName = null;
        String tag = null;
        api.repositoriesRepoNameTagsTagLabelsPost(body, repoName, tag);

        // TODO: test validations
    }
    /**
     * Get manifests of a relevant repository.
     *
     * This endpoint aims to retreive manifests from a relevant repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagManifestGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        String version = null;
        Manifest response = api.repositoriesRepoNameTagsTagManifestGet(repoName, tag, version);

        // TODO: test validations
    }
    /**
     * Scan the image.
     *
     * Trigger jobservice to call Clair API to scan the image identified by the repo_name and tag.  Only project admins have permission to scan images under the project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagScanPostTest() throws ApiException {
        String repoName = null;
        String tag = null;
        api.repositoriesRepoNameTagsTagScanPost(repoName, tag);

        // TODO: test validations
    }
    /**
     * Get vulnerability details of the image.
     *
     * Call Clair API to get the vulnerability based on the previous successful scan. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagVulnerabilityDetailsGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        List<VulnerabilityItem> response = api.repositoriesRepoNameTagsTagVulnerabilityDetailsGet(repoName, tag);

        // TODO: test validations
    }
    /**
     * Scan all images of the registry.
     *
     * The server will launch different jobs to scan each image on the regsitry, so this is equivalent to calling  the API to scan the image one by one in background, so there&#x27;s no way to track the overall status of the \&quot;scan all\&quot; action.  Only system adim has permission to call this API.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesScanAllPostTest() throws ApiException {
        Integer projectId = null;
        api.repositoriesScanAllPost(projectId);

        // TODO: test validations
    }
    /**
     * Get public repositories which are accessed most.
     *
     * This endpoint aims to let users see the most popular public repositories 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesTopGetTest() throws ApiException {
        Integer count = null;
        List<Repository> response = api.repositoriesTopGet(count);

        // TODO: test validations
    }
    /**
     * Search for projects, repositories and helm charts
     *
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchGetTest() throws ApiException {
        String q = null;
        List<Search> response = api.searchGet(q);

        // TODO: test validations
    }
    /**
     * Get projects number and repositories number relevant to the user
     *
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statisticsGetTest() throws ApiException {
        StatisticMap response = api.statisticsGet();

        // TODO: test validations
    }
    /**
     * Get gc results.
     *
     * This endpoint let user get latest ten gc results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcGetTest() throws ApiException {
        List<GCResult> response = api.systemGcGet();

        // TODO: test validations
    }
    /**
     * Get gc status.
     *
     * This endpoint let user get gc status filtered by specific ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcIdGetTest() throws ApiException {
        Integer id = null;
        List<GCResult> response = api.systemGcIdGet(id);

        // TODO: test validations
    }
    /**
     * Get gc job log.
     *
     * This endpoint let user get gc job logs filtered by specific ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcIdLogGetTest() throws ApiException {
        Integer id = null;
        String response = api.systemGcIdLogGet(id);

        // TODO: test validations
    }
    /**
     * Get gc&#x27;s schedule.
     *
     * This endpoint is for get schedule of gc job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcScheduleGetTest() throws ApiException {
        List<GCSchedule> response = api.systemGcScheduleGet();

        // TODO: test validations
    }
    /**
     * Create a gc schedule.
     *
     * This endpoint is for update gc schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcSchedulePostTest() throws ApiException {
        GCSchedule body = null;
        api.systemGcSchedulePost(body);

        // TODO: test validations
    }
    /**
     * Update gc&#x27;s schedule.
     *
     * This endpoint is for update gc schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcSchedulePutTest() throws ApiException {
        GCSchedule body = null;
        api.systemGcSchedulePut(body);

        // TODO: test validations
    }
    /**
     * Get general system info
     *
     * This API is for retrieving general system info, this can be called by anonymous request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoGetTest() throws ApiException {
        GeneralInfo response = api.systeminfoGet();

        // TODO: test validations
    }
    /**
     * Get default root certificate.
     *
     * This endpoint is for downloading a default root certificate. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoGetcertGetTest() throws ApiException {
        api.systeminfoGetcertGet();

        // TODO: test validations
    }
    /**
     * Get system volume info (total/free size).
     *
     * This endpoint is for retrieving system volume info that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoVolumesGetTest() throws ApiException {
        SystemInfo response = api.systeminfoVolumesGet();

        // TODO: test validations
    }
    /**
     * List filters targets by name.
     *
     * This endpoint let user list filters targets by name, if name is nil, list returns all targets. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsGetTest() throws ApiException {
        String name = null;
        List<RepTarget> response = api.targetsGet(name);

        // TODO: test validations
    }
    /**
     * Delete specific replication&#x27;s target.
     *
     * This endpoint is for to delete specific replication&#x27;s target. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.targetsIdDelete(id);

        // TODO: test validations
    }
    /**
     * Get replication&#x27;s target.
     *
     * This endpoint is for get specific replication&#x27;s target.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsIdGetTest() throws ApiException {
        Integer id = null;
        RepTarget response = api.targetsIdGet(id);

        // TODO: test validations
    }
    /**
     * List the target relevant policies.
     *
     * This endpoint list policies filter with specific replication&#x27;s target ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsIdPoliciesGetTest() throws ApiException {
        Integer id = null;
        List<RepPolicy> response = api.targetsIdPoliciesGet(id);

        // TODO: test validations
    }
    /**
     * Update replication&#x27;s target.
     *
     * This endpoint is for update specific replication&#x27;s target. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsIdPutTest() throws ApiException {
        PutTarget body = null;
        Integer id = null;
        api.targetsIdPut(body, id);

        // TODO: test validations
    }
    /**
     * Ping validates target.
     *
     * This endpoint is for ping validates whether the target is reachable and whether the credential is valid. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsPingPostTest() throws ApiException {
        PingTarget body = null;
        api.targetsPingPost(body);

        // TODO: test validations
    }
    /**
     * Create a new replication target.
     *
     * This endpoint is for user to create a new replication target. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void targetsPostTest() throws ApiException {
        RepTargetPost body = null;
        api.targetsPost(body);

        // TODO: test validations
    }
    /**
     * Get all user groups information
     *
     * Get all user groups information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGetTest() throws ApiException {
        List<UserGroup> response = api.usergroupsGet();

        // TODO: test validations
    }
    /**
     * Delete user group
     *
     * Delete user group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdDeleteTest() throws ApiException {
        Integer groupId = null;
        api.usergroupsGroupIdDelete(groupId);

        // TODO: test validations
    }
    /**
     * Get user group information
     *
     * Get user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdGetTest() throws ApiException {
        Integer groupId = null;
        UserGroup response = api.usergroupsGroupIdGet(groupId);

        // TODO: test validations
    }
    /**
     * Update group information
     *
     * Update user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdPutTest() throws ApiException {
        Integer groupId = null;
        UserGroup body = null;
        api.usergroupsGroupIdPut(groupId, body);

        // TODO: test validations
    }
    /**
     * Create user group
     *
     * Create user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsPostTest() throws ApiException {
        UserGroup body = null;
        api.usergroupsPost(body);

        // TODO: test validations
    }
    /**
     * Get current user info.
     *
     * This endpoint is to get the current user infomation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersCurrentGetTest() throws ApiException {
        User response = api.usersCurrentGet();

        // TODO: test validations
    }
    /**
     * Get registered users of Harbor.
     *
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String username = null;
        String email = null;
        Integer page = null;
        Integer pageSize = null;
        List<User> response = api.usersGet(username, email, page, pageSize);

        // TODO: test validations
    }
    /**
     * Creates a new user account.
     *
     * This endpoint is to create a user if the user does not already exist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        User body = null;
        api.usersPost(body);

        // TODO: test validations
    }
    /**
     * Mark a registered user as be removed.
     *
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won&#x27;t be deleted from DB. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() throws ApiException {
        Integer userId = null;
        api.usersUserIdDelete(userId);

        // TODO: test validations
    }
    /**
     * Get a user&#x27;s profile.
     *
     * Get user&#x27;s profile with user id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Integer userId = null;
        User response = api.usersUserIdGet(userId);

        // TODO: test validations
    }
    /**
     * Change the password on a user that already exists.
     *
     * This endpoint is for user to update password. Users with the admin role can change any user&#x27;s password. Guest users can change only their own password. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPasswordPutTest() throws ApiException {
        Password body = null;
        Integer userId = null;
        api.usersUserIdPasswordPut(body, userId);

        // TODO: test validations
    }
    /**
     * Update a registered user to change his profile.
     *
     * This endpoint let a registered user change his profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPutTest() throws ApiException {
        UserProfile body = null;
        Integer userId = null;
        api.usersUserIdPut(body, userId);

        // TODO: test validations
    }
    /**
     * Update a registered user to change to be an administrator of Harbor.
     *
     * This endpoint let a registered user change to be an administrator of Harbor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdSysadminPutTest() throws ApiException {
        HasAdminRole body = null;
        Integer userId = null;
        api.usersUserIdSysadminPut(body, userId);

        // TODO: test validations
    }
}
