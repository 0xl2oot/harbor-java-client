/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.imwyh.harbor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The metadata of chart version
 */
@Schema(description = "The metadata of chart version")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T14:29:11.153+08:00[Asia/Shanghai]")public class ChartMetadata {

  @SerializedName("name")
  private String name = null;

  @SerializedName("home")
  private String home = null;

  @SerializedName("sources")
  private List<String> sources = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("keywords")
  private List<String> keywords = null;

  @SerializedName("engine")
  private String engine = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("apiVersion")
  private String apiVersion = null;

  @SerializedName("appVersion")
  private String appVersion = null;

  @SerializedName("deprecated")
  private Boolean deprecated = null;
  public ChartMetadata name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The name of the chart
  * @return name
  **/
  @Schema(required = true, description = "The name of the chart")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ChartMetadata home(String home) {
    this.home = home;
    return this;
  }

  

  /**
  * The URL to the relevant project page
  * @return home
  **/
  @Schema(description = "The URL to the relevant project page")
  public String getHome() {
    return home;
  }
  public void setHome(String home) {
    this.home = home;
  }
  public ChartMetadata sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public ChartMetadata addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<String>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
  * The URL to the source code of chart
  * @return sources
  **/
  @Schema(description = "The URL to the source code of chart")
  public List<String> getSources() {
    return sources;
  }
  public void setSources(List<String> sources) {
    this.sources = sources;
  }
  public ChartMetadata version(String version) {
    this.version = version;
    return this;
  }

  

  /**
  * A SemVer 2 version of chart
  * @return version
  **/
  @Schema(required = true, description = "A SemVer 2 version of chart")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }
  public ChartMetadata description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * A one-sentence description of chart
  * @return description
  **/
  @Schema(description = "A one-sentence description of chart")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public ChartMetadata keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public ChartMetadata addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
  * A list of string keywords
  * @return keywords
  **/
  @Schema(description = "A list of string keywords")
  public List<String> getKeywords() {
    return keywords;
  }
  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }
  public ChartMetadata engine(String engine) {
    this.engine = engine;
    return this;
  }

  

  /**
  * The name of template engine
  * @return engine
  **/
  @Schema(required = true, description = "The name of template engine")
  public String getEngine() {
    return engine;
  }
  public void setEngine(String engine) {
    this.engine = engine;
  }
  public ChartMetadata icon(String icon) {
    this.icon = icon;
    return this;
  }

  

  /**
  * The URL to an icon file
  * @return icon
  **/
  @Schema(required = true, description = "The URL to an icon file")
  public String getIcon() {
    return icon;
  }
  public void setIcon(String icon) {
    this.icon = icon;
  }
  public ChartMetadata apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  

  /**
  * The API version of this chart
  * @return apiVersion
  **/
  @Schema(required = true, description = "The API version of this chart")
  public String getApiVersion() {
    return apiVersion;
  }
  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }
  public ChartMetadata appVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  

  /**
  * The version of the application enclosed in the chart
  * @return appVersion
  **/
  @Schema(required = true, description = "The version of the application enclosed in the chart")
  public String getAppVersion() {
    return appVersion;
  }
  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }
  public ChartMetadata deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  

  /**
  * Whether or not this chart is deprecated
  * @return deprecated
  **/
  @Schema(description = "Whether or not this chart is deprecated")
  public Boolean isDeprecated() {
    return deprecated;
  }
  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartMetadata chartMetadata = (ChartMetadata) o;
    return Objects.equals(this.name, chartMetadata.name) &&
        Objects.equals(this.home, chartMetadata.home) &&
        Objects.equals(this.sources, chartMetadata.sources) &&
        Objects.equals(this.version, chartMetadata.version) &&
        Objects.equals(this.description, chartMetadata.description) &&
        Objects.equals(this.keywords, chartMetadata.keywords) &&
        Objects.equals(this.engine, chartMetadata.engine) &&
        Objects.equals(this.icon, chartMetadata.icon) &&
        Objects.equals(this.apiVersion, chartMetadata.apiVersion) &&
        Objects.equals(this.appVersion, chartMetadata.appVersion) &&
        Objects.equals(this.deprecated, chartMetadata.deprecated);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, home, sources, version, description, keywords, engine, icon, apiVersion, appVersion, deprecated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartMetadata {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
